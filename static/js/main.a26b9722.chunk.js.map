{"version":3,"sources":["Translate.js","App.js","serviceWorker.js","index.js"],"names":["a","url","data","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","response","json","Translate","state","input","translation","flip","handleChange","bind","handleClick","postData","this","then","setState","sentences","trans","e","target","value","textStyle","resultStyle","animation","zIndex","className","name","id","onChange","style","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iVAGA,4CAAAA,EAAA,6DAAwBC,EAAxB,+BAA8B,GAAIC,EAAlC,+BAAyC,GAAzC,SAE2BC,MAAMF,EAAK,CAChCG,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbC,QAAS,CACP,eAAgB,oCAChB,aAAc,kFAIhBC,SAAU,SACVC,eAAgB,cAChBC,KAAMT,IAfZ,cAEUU,EAFV,yBAkBWA,EAASC,QAlBpB,4C,0BA8FeC,E,kDAtEX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTC,MAAO,GACPC,YAAa,GACbC,MAAM,GAEV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBARV,E,0DAYC,IAAD,Q,2CAGTE,CAAS,8MAFI,iBAAiBC,KAAKR,MAAMC,OAGhCQ,MAAK,SAAAtB,GACN,EAAKuB,SAAS,CACVR,YAAaf,EAAKwB,UAAU,GAAGC,MAC/BT,MAAO,EAAKH,MAAMG,KAClBF,MAAO,U,mCAYVY,GAETL,KAAKE,SAAS,CACVT,MAAOY,EAAEC,OAAOC,U,+BAKpB,IACIC,EAAY,GACZC,EAAc,GASlB,OAXiBT,KAAKR,MAAMG,OAIxBa,EAAY,CACRE,UAAW,kBAEfD,EAAc,CACVE,OAAQ,MAIZ,yBAAKC,UAAU,aACX,4DACA,yBAAKA,UAAU,SACX,8BACIC,KAAK,QACLC,GAAG,YACHC,SAAYf,KAAKJ,aACjBoB,MAAOR,IAEX,yBAAKI,UAAU,SAASI,MAAOP,GAAcT,KAAKR,MAAME,cAE5D,4BAAQkB,UAAU,MAAMK,QAASjB,KAAKF,aAAtC,kB,GAhEQoB,IAAMC,WCdfC,MARf,WACE,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,QCKcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a26b9722.chunk.js","sourcesContent":["import React from 'react'\r\nimport './App.css'\r\n\r\nasync function postData(url = '', data = '') {\r\n    // Default options are marked with *\r\n    const response = await fetch(url, {\r\n      method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n      mode: 'cors', // no-cors, *cors, same-origin\r\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n      credentials: 'same-origin', // include, *same-origin, omit\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        'User-Agent': 'AndroidTranslate/5.3.0.RC02.130475354-53000263 5.1 phone TRANSLATE_OPM5_TEST_1'\r\n        // 'Access-Control-Allow-Origin':'*' \r\n        // 'Content-Type': 'application/x-www-form-urlencoded'\r\n      },\r\n      redirect: 'follow', // manual, *follow, error\r\n      referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n      body: data // body data type must match \"Content-Type\" header\r\n    })\r\n\r\n    return response.json() // parses JSON response into native JavaScript objects\r\n  }\r\n\r\n// ------------------------------------------------\r\n\r\nclass Translate extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            input: \"\",\r\n            translation: \"\",\r\n            flip: false\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleClick = this.handleClick.bind(this)\r\n\r\n    }\r\n\r\n    handleClick(){\r\n        let sldata = 'sl=en&tl=de&q='+this.state.input\r\n        // https://cors-anywhere.herokuapp.com/\r\n        postData('https://cors-anywhere.herokuapp.com/translate.google.com/translate_a/single?client=at&dt=t&dt=ld&dt=qca&dt=rm&dt=bd&dj=1&hl=%25s&ie=UTF-8&oe=UTF-8&inputm=2&otf=2&iid=1dd3b944-fa62-4b55-b330-74909a99969e&', sldata)\r\n                .then(data => {\r\n                this.setState({\r\n                    translation: data.sentences[0].trans,\r\n                    flip: !this.state.flip, \r\n                    input: ''\r\n                    }\r\n                )\r\n            })\r\n\r\n        // this.setState({\r\n        //     translation: \"\",\r\n        //     flip: !this.state.flip, \r\n        //     input: ''\r\n        // })\r\n    }\r\n\r\n    handleChange(e){\r\n        \r\n        this.setState({\r\n            input: e.target.value\r\n        })\r\n    }\r\n\r\n    render(){\r\n        let shouldFlip = this.state.flip\r\n        let textStyle = {}\r\n        let resultStyle = {}\r\n        if (shouldFlip){\r\n            textStyle = {\r\n                animation: 'swap 1s linear'  \r\n            }\r\n            resultStyle = {\r\n                zIndex: '1' \r\n            }\r\n        }\r\n        return(\r\n            <div className='container'>\r\n                <h1>English to German Translator</h1>\r\n                <div className='stack'>\r\n                    <textarea \r\n                        name=\"input\" \r\n                        id=\"inputText\"  \r\n                        onChange = {this.handleChange}\r\n                        style={textStyle}\r\n                    ></textarea>\r\n                    <div className='result' style={resultStyle}>{this.state.translation}</div>\r\n                </div>\r\n                <button className='btn' onClick={this.handleClick}>Translate</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Translate","import React from 'react';\nimport './App.css';\nimport Translate from './Translate.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Translate />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}